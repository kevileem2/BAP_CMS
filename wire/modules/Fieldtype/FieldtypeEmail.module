<?php namespace ProcessWire;

/**
 * ProcessWire E-Mail Fieldtype
 *
 * Fieldtype for holding an email address. 
 *
 * For documentation about the fields used in this class, please see:  
 * /wire/core/Fieldtype.php
 * 
 * ProcessWire 3.x, Copyright 2020 by Ryan Cramer
 * https://processwire.com
 *
 *
 */
class FieldtypeEmail extends FieldtypeText {

	public static function getModuleInfo() {
		return array(
			'title' => 'E-Mail',
			'version' => 101,
			'summary' => 'Field that stores an e-mail address',
		);
	}
	
	public function getMaxEmailLength() {
		return $this->wire('database')->getMaxIndexLength();
	}

	public function getInputfield(Page $page, Field $field) {
		/** @var InputfieldEmail $inputfield */
		$inputfield = $this->modules->get('InputfieldEmail'); 
		$inputfield->class = $this->className();
		return $inputfield; 
	}

	public function sanitizeValue(Page $page, Field $field, $value) {
		if(strlen($value) > $this->getMaxEmailLength()) return '';
		return $this->wire('sanitizer')->email($value);
	}

	public function getDatabaseSchema(Field $field) {
		$len = $this->getMaxEmailLength();
		$schema = parent::getDatabaseSchema($field); 
		$schema['data'] = "varchar($len) NOT NULL default ''";
		
		if($field->hasFlag(Field::flagUnique) != (bool) $field->flagUnique) {
			$fields = $this->wire('fields'); /** @var Fields $fields */
			$fields->tableTools()->checkUniqueIndex($field); 
		}
		
		return $schema;
	}
	
	public function isDeleteValue(Page $page, Field $field, $value) {
		return empty($value);
	}
	
	public function ___getConfigAdvancedInputfields(Field $field) {
		$inputfields = parent::___getConfigAdvancedInputfields($field);
		$fields = $this->wire('fields'); /** @var Fields $fields */
		$f = $fields->tableTools()->getUniqueIndexInputfield($field); 
		$inputfields->prepend($f);
		return $inputfields;
	}
	
}


